{"version":3,"sources":["estimator/normalise.ts","estimator/impact.ts","estimator/index.ts","components/GridList.tsx","components/TextFields.tsx","components/TabPanel.tsx","components/Estimator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getDays","periodType","timeToElapse","days","getExpectedData","data","expectedInfections","region","avgDailyIncomeInUSD","avgDailyIncomePopulation","currentlyInfected","reportedCases","factor","Math","floor","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","trunc","totalHospitalBeds","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","covid19ImpactEstimator","impact","severeImpact","useStyles","makeStyles","theme","card_content","padding","textAlign","backgroundColor","width","Case","classes","Container","Grid","container","spacing","item","style","display","Card","className","CardContent","alignItems","Typography","color","marginBottom","variant","component","root","margin","app","period","FieldContainer","population","handleChange","handleSubmit","noValidate","autoComplete","onSubmit","TextField","fullWidth","label","type","name","value","onChange","helperText","data-population","data-reported-cases","data-time-to-elapse","data-total-hospital-beds","id","select","data-period-type","map","option","i","MenuItem","key","Button","size","data-go-estimate","TabPanel","props","children","index","other","role","hidden","aria-labelledby","Box","p","pub","marginLeft","title","flexGrow","breakpoints","up","a11yProps","Estimator","useState","setValue","feedback","setFeedback","estimatedData","setEstimatedData","field","setField","handleTabChange","_event","newValue","AppBar","position","Toolbar","event","preventDefault","Number","target","Snackbar","open","autoHideDuration","ContentProps","message","Tabs","aria-label","Tab","IconButton","edge","noWrap","showCard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wVAceA,MAdf,SAAiBC,EAAoBC,GACnC,IAAIC,EAAO,EAUX,MATmB,SAAfF,IACFE,EAAOD,GAEU,UAAfD,IACFE,EAAsB,EAAfD,GAEU,WAAfD,IACFE,EAAuB,GAAfD,GAEHC,GCyCMC,MAxBf,SAAyBC,EAAYC,GACnC,IAAMH,EAAOH,EAAQK,EAAKJ,WAAYI,EAAKH,cAD+B,EAEhBG,EAAKE,OAAvDC,EAFkE,EAElEA,oBAAqBC,EAF6C,EAE7CA,yBACvBC,EAAoBL,EAAKM,cAAgBL,EACzCM,EAASC,KAAKC,MAAMX,EAAO,GAC3BY,EAA4BL,EAAiB,SAAI,EAAKE,GACtDI,EAA6BH,KAAKC,MAAM,IAAOC,GAQrD,MAAO,CACLL,oBACAK,4BACAC,6BACAC,4BAVkCJ,KAAKK,MAAO,IAAOb,EAAKc,kBAAqBH,GAW/EI,2BAViCP,KAAKC,MAAM,IAAOC,GAWnDM,mCAVyCR,KAAKC,MAAM,IAAOC,GAW3DO,gBATsBT,KAAKC,MAAON,EAAsBO,EAA4BN,EAA4BN,KCzBrGoB,MARf,SAAgClB,GAC9B,MAAO,CACLA,OACAmB,OAAQpB,EAAgBC,EAAM,IAC9BoB,aAAcrB,EAAgBC,EAAM,M,2BCAlCqB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,aAAc,CACZC,QAAS,OACTC,UAAW,SACXC,gBAAiB,UACjBC,MAAO,aA2FIC,MAtFf,YAA8B,IAAf7B,EAAc,EAAdA,KACP8B,EAAUT,IAChB,OACA,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAEC,QAAS,GACtB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,MAAO,CAACC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAMC,UAAWT,EAAQN,cACvB,kBAACgB,EAAA,EAAD,CAAaJ,MAAO,CAACK,WAAY,WAC/B,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBP,MAAO,CAACQ,aAAc,SAAzD,sBAGA,kBAACF,EAAA,EAAD,CAAaC,MAAM,iBAChB3C,EAAKK,sBAKd,kBAAC2B,EAAA,EAAD,CAAMG,MAAI,EAACC,MAAO,CAACC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAOC,UAAWT,EAAQN,cACxB,kBAACgB,EAAA,EAAD,CAAaJ,MAAO,CAACK,WAAY,WAC/B,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBP,MAAO,CAACQ,aAAc,SAAzD,gCAIA,kBAACF,EAAA,EAAD,CAAaC,MAAM,iBAChB3C,EAAKU,8BAKd,kBAACsB,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACG,EAAA,EAAD,CAAOC,UAAWT,EAAQN,cACxB,kBAACgB,EAAA,EAAD,CAAaJ,MAAO,CAACK,WAAY,WAC/B,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBP,MAAO,CAACQ,aAAc,SAAzD,kCAIA,kBAACF,EAAA,EAAD,CAAYC,MAAM,iBACf3C,EAAKW,+BAKd,kBAACqB,EAAA,EAAD,CAAMG,MAAI,EAACC,MAAO,CAACC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAOC,UAAWT,EAAQN,cACxB,kBAACgB,EAAA,EAAD,CAAcJ,MAAO,CAACK,WAAY,WAChC,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBP,MAAO,CAACQ,aAAc,SAAzD,kCAIA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,QAAQC,UAAU,KACnC9C,EAAKY,gCAKd,kBAACoB,EAAA,EAAD,CAAMG,MAAI,EAACC,MAAO,CAACC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAOC,UAAWT,EAAQN,cACxB,kBAACgB,EAAA,EAAD,CAAcJ,MAAO,CAACK,WAAY,WAChC,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBP,MAAO,CAACQ,aAAc,SAAzD,2CAIA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,QAAQC,UAAU,KACrC9C,EAAKgB,uCAKZ,kBAACgB,EAAA,EAAD,CAAMG,MAAI,EAACC,MAAO,CAACC,QAAS,SAC5B,kBAACC,EAAA,EAAD,CAAOC,UAAWT,EAAQN,cACxB,kBAACgB,EAAA,EAAD,CAAcJ,MAAO,CAACK,WAAY,WAChC,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBP,MAAO,CAACQ,aAAc,SAAzD,qBAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,QAAQC,UAAU,KACnC9C,EAAKiB,uB,2BC3FdI,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwB,KAAM,CACJ,uBAAwB,CACtBC,OAAQzB,EAAMW,QAAQ,GACtBN,MAAO,SAGXqB,IAAK,CACHZ,QAAS,YAIPa,EAAS,CAAC,OAAQ,QAAS,UAepBC,EAA6B,SAAC,GAW7B,IAVZjD,EAUW,EAVXA,OACAC,EASW,EATXA,oBACAC,EAQW,EARXA,yBACAR,EAOW,EAPXA,WACAC,EAMW,EANXA,aACAS,EAKW,EALXA,cACA8C,EAIW,EAJXA,WACAtC,EAGW,EAHXA,kBACAuC,EAEW,EAFXA,aACAC,EACW,EADXA,aAEMxB,EAAUT,IAEhB,OACE,6BACE,0BAAOkB,UAAWT,EAAQiB,KAAMQ,YAAU,EAACC,aAAa,MAAMC,SAAUH,GACpE,kBAACI,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,oBACNC,KAAK,SACLb,OAAO,SACPH,QAAQ,WACRiB,KAAK,SACLC,MAAO7D,EACP8D,SAAUX,IAEZ,kBAACK,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,6BACNC,KAAK,SACLb,OAAO,SACPH,QAAQ,WACRiB,KAAK,sBACLC,MAAO5D,EACP6D,SAAUX,EACVY,WAAW,8BAEb,kBAACP,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,0BACNC,KAAK,SACLb,OAAO,SACPH,QAAQ,WACRiB,KAAK,2BACLC,MAAO3D,EACP4D,SAAUX,EACVY,WAAW,mCAEb,kBAACP,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,wBACNC,KAAK,SACLb,OAAO,SACPH,QAAQ,WACRiB,KAAK,aACLC,MAAOX,EACPc,kBAAiBd,EACjBY,SAAUX,EACVY,WAAW,qBAEf,kBAACP,EAAA,EAAD,CACIC,WAAS,EACTC,MAAM,4BACNC,KAAK,SACLb,OAAO,SACPH,QAAQ,WACRiB,KAAK,gBACLC,MAAOzD,EACP6D,sBAAqB7D,EACrB0D,SAAUX,EACVY,WAAW,wBAEf,kBAACP,EAAA,EAAD,CACIC,WAAS,EACTC,MAAM,oBACNC,KAAK,SACLb,OAAO,SACPH,QAAQ,WACRiB,KAAK,eACLC,MAAOlE,EACPuE,sBAAqBvE,EACrBmE,SAAUX,EACVY,WAAW,uBAEb,kBAACP,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,2BACNC,KAAK,SACLb,OAAO,SACPH,QAAQ,WACRiB,KAAK,oBACLC,MAAOjD,EACPuD,2BAA0BvD,EAC1BkD,SAAUX,EACVY,WAAW,4BAEb,kBAACP,EAAA,EAAD,CACEY,GAAG,yBACHC,QAAM,EACNX,MAAM,SACNG,MAAOnE,EACPoE,SAAUX,EACVmB,mBAAkB5E,EAClBkE,KAAK,aACLG,WAAW,4BACXjB,OAAO,UAENE,EAAOuB,KAAK,SAACC,EAAQC,GAAT,OACX,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAGZ,MAAOW,GACtBA,OAIT,kBAACI,EAAA,EAAD,CACEjB,KAAK,SACLlB,MAAM,UACNoC,KAAK,QACLlC,QAAQ,YACRmC,mBAAkB,CAAC9E,SAAQN,aAAYC,iBALzC,a,iBCxHOoF,MAjBf,SAAkBC,GAAe,IACvBC,EAAqCD,EAArCC,SAAUpB,EAA2BmB,EAA3BnB,MAAOqB,EAAoBF,EAApBE,MAAUC,EADL,YACeH,EADf,8BAG9B,OACE,kBAACxC,EAAA,EAAD,eACEI,UAAU,MACVwC,KAAK,WACLC,OAAQxB,IAAUqB,EAClBd,GAAE,0BAAqBc,GACvBI,kBAAA,qBAA+BJ,IAC3BC,GAEHtB,IAAUqB,GAAS,kBAACK,EAAA,EAAD,CAAKC,EAAG,GAAIP,K,0BCThC9D,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwB,KAAM,CACJ,uBAAwB,CACtBC,OAAQzB,EAAMW,QAAQ,GACtBN,MAAO,SAGX+D,IAAK,CACHC,WAAY,OAEdC,MAAM,aACJC,SAAU,EACVzD,QAAS,QACRd,EAAMwE,YAAYC,GAAG,MAAQ,CAC5B3D,QAAS,UAGbY,IAAK,CACHZ,QAAS,YAIb,SAAS4D,EAAUb,GACjB,MAAO,CACLd,GAAG,cAAD,OAAgBc,GAClB,gBAAgB,mBAAhB,OAAoCA,IAIjC,IAAMc,EAAiB,WAC5B,IAAMpE,EAAUT,IADkB,EAER8E,mBAAS,GAFD,mBAE3BpC,EAF2B,KAEpBqC,EAFoB,OAGFD,oBAAS,GAHP,mBAG3BE,EAH2B,KAGjBC,EAHiB,OAIQH,mBAA+B,MAJvC,mBAI3BI,EAJ2B,KAIZC,EAJY,OAKRL,mBAAS,CACjCjG,OAAQ,GACRC,oBAAqB,GACrBC,yBAA0B,GAC1BR,WAAY,GACZC,aAAc,GACdS,cAAe,GACf8C,WAAY,GACZtC,kBAAmB,KAba,mBAK3B2F,EAL2B,KAKpBC,EALoB,KAgB5BC,EAAkB,SAACC,EAAaC,GACpCT,EAASS,IA2EX,OACA,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASnE,QAAQ,SACf,kBAACH,EAAA,EAAD,CAAYG,QAAQ,MAApB,6CAKJ,kBAACd,EAAA,EAAD,KACE,kBAAC,EAAD,CACE7B,OAAQuG,EAAMvG,OACdC,oBAAqBsG,EAAMtG,oBAC3BC,yBAA0BqG,EAAMrG,yBAChCP,aAAc4G,EAAM5G,aACpBiB,kBAAmB2F,EAAM3F,kBACzBsC,WAAYqD,EAAMrD,WAClBxD,WAAY6G,EAAM7G,WAClBU,cAAemG,EAAMnG,cACrBgD,aArCN,SAAsB2D,GACpBA,EAAMC,iBAtDe,KAAjBT,EAAMvG,QACoB,KAA9BuG,EAAMtG,qBAC6B,KAAnCsG,EAAMrG,0BACe,KAArBqG,EAAM7G,YACiB,KAAvB6G,EAAM5G,cACkB,KAAxB4G,EAAMnG,eACe,KAArBmG,EAAMrD,YACsB,KAA5BqD,EAAM3F,kBACJwF,GAAY,IAGZA,GAAY,GACZE,EAAiB,OA4CnB,IAAMxG,EAAO,CACXE,OAAQ,CACN4D,KAAM2C,EAAMvG,OACZC,oBAAqBgH,OAAOV,EAAMtG,qBAClCC,yBAA0B+G,OAAOV,EAAMrG,2BAEzCR,WAAY6G,EAAM7G,WAClBC,aAAcsH,OAAOV,EAAM5G,cAC3BS,cAAe6G,OAAOV,EAAMnG,eAC5B8C,WAAY+D,OAAOV,EAAMrD,YACzBtC,kBAAmBqG,OAAOV,EAAM3F,oBAElC0F,EAAiBtF,EAAuBlB,KAuBpCqD,aA5CN,SAAsB4D,GACpBX,GAAY,GACZE,EAAiB,MACjBE,EAAS,eAAID,EAAL,eAAaQ,EAAMG,OAAOtD,KAAOmD,EAAMG,OAAOrD,YA2CnDsC,EACE,8BACA,kBAAC3D,EAAA,EAAD,CAAYG,QAAQ,SAApB,wBAGA,kBAACwE,EAAA,EAAD,CACEC,KAAMjB,EACNkB,iBAAkB,IAClBC,aAAc,CACZ,mBAAoB,cAEtBC,QAAS,0BAAMnD,GAAG,cAAT,wCAvFlB,WACE,GAAIiC,EAAe,CAAC,IACbpF,EAAyBoF,EAAzBpF,OAASC,EAAgBmF,EAAhBnF,aAChB,OACE,6BACE,kBAAC0F,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASnE,QAAQ,SACjB,kBAAC6E,EAAA,EAAD,CAAM3D,MAAOA,EAAQxB,UAAWT,EAAQ+D,MAAO7B,SAAU2C,EAAiBgB,aAAW,uBACnF,kBAACC,EAAA,EAAD,eAAKhE,MAAM,gBAAmBqC,EAAU,KACxC,kBAAC2B,EAAA,EAAD,eAAKhE,MAAM,gBAAmBqC,EAAU,MAE1C,kBAAC4B,EAAA,EAAD,CAAYF,aAAW,QAAQG,KAAK,MAAMnF,MAAM,WAC9C,kBAAC,IAAD,OAEA,kBAACD,EAAA,EAAD,CAAaG,QAAQ,KAAKkF,QAAM,GAC7BtB,EAAMvG,UAIb,kBAAC,EAAD,CAAU6D,MAAOA,EAAOqB,MAAO,GAC7B,kBAAC,EAAD,CAAMpF,KAAMmB,KAEd,kBAAC,EAAD,CAAU4C,MAAOA,EAAOqB,MAAO,GAC7B,kBAAC,EAAD,CAAMpF,KAAMoB,OAmEX4G,M,MCtKI,SAASC,IACtB,OACE,kBAAC,EAAD,MCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1B,c","file":"static/js/main.c98efda4.chunk.js","sourcesContent":["function getDays(periodType: string, timeToElapse: number): number {\n  let days = 0;\n  if (periodType === 'days') {\n    days = timeToElapse;\n  }\n  if (periodType === 'weeks') {\n    days = timeToElapse * 7;\n  }\n  if (periodType === 'months') {\n    days = (timeToElapse * 30);\n  }\n  return days;\n}\n\nexport default getDays;\n","import getDays from './normalise';\n\nexport interface Region {\n  name: string;\n  avgAge?: number;\n  avgDailyIncomeInUSD: number;\n  avgDailyIncomePopulation: number; \n}\n\nexport interface Data {\n  region: Region;\n  periodType: string;\n  timeToElapse: number;\n  reportedCases: number;\n  population: number;\n  totalHospitalBeds: number; \n}\n\nexport interface Estimator {\n  currentlyInfected: number\n  infectionsByRequestedTime: number;\n  severeCasesByRequestedTime: number;\n  hospitalBedsByRequestedTime: number;\n  casesForICUByRequestedTime: number;\n  casesForVentilatorsByRequestedTime: number;\n  dollarsInFlight: number;\n}\n\nfunction getExpectedData(data: Data, expectedInfections: number): Estimator {\n  const days = getDays(data.periodType, data.timeToElapse);\n  const { avgDailyIncomeInUSD, avgDailyIncomePopulation } = data.region;\n  const currentlyInfected = data.reportedCases * expectedInfections;\n  const factor = Math.floor(days / 3);\n  const infectionsByRequestedTime = currentlyInfected * (2 ** factor);\n  const severeCasesByRequestedTime = Math.floor(0.15 * infectionsByRequestedTime);\n  // eslint-disable-next-line max-len\n  const hospitalBedsByRequestedTime = Math.trunc((0.35 * data.totalHospitalBeds) - severeCasesByRequestedTime);\n  const casesForICUByRequestedTime = Math.floor(0.05 * infectionsByRequestedTime);\n  const casesForVentilatorsByRequestedTime = Math.floor(0.02 * infectionsByRequestedTime);\n  // eslint-disable-next-line max-len\n  const dollarsInFlight = Math.floor((avgDailyIncomeInUSD * infectionsByRequestedTime * avgDailyIncomePopulation) / days);\n\n  return {\n    currentlyInfected,\n    infectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    casesForICUByRequestedTime,\n    casesForVentilatorsByRequestedTime,\n    dollarsInFlight\n  };\n}\nexport default getExpectedData;\n","import getExpectedData, { Data, Estimator } from './impact';\nexport interface EstimatedData {\n  data: Data;\n  impact: Estimator;\n  severeImpact: Estimator;\n}\n\nfunction covid19ImpactEstimator(data: Data): EstimatedData  {\n  return {\n    data,\n    impact: getExpectedData(data, 10),\n    severeImpact: getExpectedData(data, 50)\n  }\n};\n\nexport default covid19ImpactEstimator;\n","import React from \"react\";\nimport { Grid,\n   Card, CardContent, Typography, Container \n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Estimator } from \"../estimator/impact\";\n\ninterface Props {\n  data: Estimator;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  card_content: {\n    padding: \"16px\",\n    textAlign: \"center\",\n    backgroundColor: \"#f1f1f1\", \n    width: \"200px\"\n  }\n}));\n\n\nfunction Case({data}: Props) {\n  const classes = useStyles();\n  return (\n  <Container>\n    <Grid container  spacing={2} >\n        <Grid item style={{display: \"flex\"}} >\n          <Card className={classes.card_content}>\n            <CardContent style={{alignItems: \"center\"}}>\n              <Typography  color=\"textSecondary\" style={{marginBottom: \"20px\"}}>\n                Currently Infected \n              </Typography>\n              <Typography  color=\"textSecondary\">\n                {data.currentlyInfected}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item style={{display: \"flex\"}}>\n          <Card  className={classes.card_content}>\n            <CardContent style={{alignItems: \"center\"}}>\n              <Typography  color=\"textSecondary\" style={{marginBottom: \"20px\"}}>\n                 Infections By\n                 Requested Time\n              </Typography>\n              <Typography  color=\"textSecondary\">\n                {data.infectionsByRequestedTime}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card  className={classes.card_content}>\n            <CardContent style={{alignItems: \"center\"}}>\n              <Typography  color=\"textSecondary\" style={{marginBottom: \"20px\"}}>\n                Severe Cases By \n                Requested Time\n              </Typography>\n              <Typography color=\"textSecondary\" >\n                {data.severeCasesByRequestedTime}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item style={{display: \"flex\"}}>\n          <Card  className={classes.card_content}>\n            <CardContent  style={{alignItems: \"center\"}}>\n              <Typography  color=\"textSecondary\" style={{marginBottom: \"20px\"}}>\n                hospital Beds By\n                RequestedTime\n              </Typography>\n              <Typography variant=\"body2\" component=\"p\">\n                {data.hospitalBedsByRequestedTime}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item style={{display: \"flex\"}}>\n          <Card  className={classes.card_content}>\n            <CardContent  style={{alignItems: \"center\"}}>\n              <Typography  color=\"textSecondary\" style={{marginBottom: \"20px\"}}>\n                cases For Ventilators \n                By Requested Time\n              </Typography>\n              <Typography variant=\"body2\" component=\"p\">\n              {data.casesForVentilatorsByRequestedTime}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item style={{display: \"flex\"}}>\n        <Card  className={classes.card_content}>\n          <CardContent  style={{alignItems: \"center\"}}>\n            <Typography  color=\"textSecondary\" style={{marginBottom: \"20px\"}}>\n              dollars In Flight\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              {data.dollarsInFlight}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>    \n  </Container>\n  )\n}\n\nexport default Case;\n","import React, {  SFC, FormEvent, ChangeEvent } from \"react\";\nimport { TextField, \n  Button, MenuItem,\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n  app: {\n    display: \"flex\"\n  }\n}));\n\nconst period = [\"days\", \"weeks\", \"months\"]\n\ninterface Props {\n  region: string;\n  avgDailyIncomeInUSD: string;\n  avgDailyIncomePopulation: string;\n  periodType: string;\n  timeToElapse: string;\n  reportedCases: string;\n  population: string;\n  totalHospitalBeds: string;\n  handleSubmit: (event: FormEvent<HTMLFormElement>) => void;\n  handleChange: (event:  ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const FieldContainer: SFC<Props> = ({\n  region,\n  avgDailyIncomeInUSD,\n  avgDailyIncomePopulation,\n  periodType,\n  timeToElapse,\n  reportedCases,\n  population,\n  totalHospitalBeds,\n  handleChange,\n  handleSubmit\n}: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <form  className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n          <TextField\n            fullWidth\n            label=\"Enter your region\"\n            type=\"string\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"region\"\n            value={region}\n            onChange={handleChange}\n          />\n          <TextField\n            fullWidth\n            label=\"Enter Average Daily Income\"\n            type=\"number\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"avgDailyIncomeInUSD\"\n            value={avgDailyIncomeInUSD}\n            onChange={handleChange}\n            helperText=\"Enter avgDailyIncomeInUSD\"\n          />\n          <TextField\n            fullWidth\n            label=\"Enter Daily Income Popn\"\n            type=\"number\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"avgDailyIncomePopulation\"\n            value={avgDailyIncomePopulation}\n            onChange={handleChange}\n            helperText=\"Enter avgDailyIncomePopulation\"\n          />\n          <TextField\n            fullWidth\n            label=\"Enter your Population\"\n            type=\"number\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"population\"\n            value={population}\n            data-population={population}\n            onChange={handleChange}\n            helperText=\"Enter population\"\n          />\n        <TextField\n            fullWidth\n            label=\"Enter your reported Cases\"\n            type=\"number\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"reportedCases\"\n            value={reportedCases}\n            data-reported-cases={reportedCases}\n            onChange={handleChange}\n            helperText=\"Enter reportedCases\"\n          />\n        <TextField\n            fullWidth\n            label=\"Enter your period\"\n            type=\"number\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"timeToElapse\"\n            value={timeToElapse}\n            data-time-to-elapse={timeToElapse}\n            onChange={handleChange}\n            helperText=\"Enter timeToElapse\"\n          />\n          <TextField\n            fullWidth\n            label=\"Enter your hospital Beds\"\n            type=\"number\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"totalHospitalBeds\"\n            value={totalHospitalBeds}\n            data-total-hospital-beds={totalHospitalBeds}\n            onChange={handleChange}\n            helperText=\"Enter totalHospitalBeds\"\n          />\n          <TextField\n            id=\"standard-select-period\"\n            select\n            label=\"Select\"\n            value={periodType}\n            onChange={handleChange}\n            data-period-type={periodType}\n            name=\"periodType\"\n            helperText=\"Please select your period\"\n            margin=\"normal\"\n            >\n            {period.map( (option, i ) => (\n              <MenuItem key={i} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n        </TextField>\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          size=\"large\"\n          variant=\"contained\"\n          data-go-estimate={{region, periodType, timeToElapse}}\n        >\n          Submit\n        </Button>\n    </form>\n  </div>\n  );\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\ninterface Props {\n  children: JSX.Element;\n  value: number;\n  index: number;\n}\n\nfunction TabPanel(props: Props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\n\nexport default TabPanel;\n","import React, { useState, SFC, FormEvent, ChangeEvent } from \"react\";\nimport { Tabs, Tab,\n   AppBar, Toolbar, Typography, Container, Snackbar\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport covid19ImpactEstimator, { EstimatedData } from \"../estimator\";\nimport Case from \"./GridList\";\n\nimport { FieldContainer } from \"./TextFields\";\nimport TabPanel from \"./TabPanel\";\nimport PublicIcon from \"@material-ui/icons/Public\";\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n  pub: {\n    marginLeft: \"2px\",\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  app: {\n    display: \"flex\"\n  }\n}));\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport const Estimator: SFC = () => {\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n  const [feedback, setFeedback] = useState(false);\n  const [estimatedData, setEstimatedData] = useState<EstimatedData | null>(null)\n  const [field, setField] = useState({\n    region: \"\",\n    avgDailyIncomeInUSD: \"\",\n    avgDailyIncomePopulation: \"\",\n    periodType: \"\",\n    timeToElapse: \"\",\n    reportedCases: \"\",\n    population: \"\",\n    totalHospitalBeds: \"\"\n  });\n\n  const handleTabChange = (_event: any, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const validateFields = (): boolean => {\n    if (field.region !== \"\" &&\n    field.avgDailyIncomeInUSD !== \"\" && \n    field.avgDailyIncomePopulation !== \"\" && \n    field.periodType !== \"\" && \n    field.timeToElapse !== \"\" && \n    field.reportedCases !== \"\" &&\n    field.population !== \"\" &&\n    field.totalHospitalBeds !== \"\")  {\n      setFeedback(false)\n      return true;\n    } else {\n      setFeedback(true)\n      setEstimatedData(null) \n      return false; \n  }\n  }\n\n  function showCard(){\n    if (estimatedData) {\n    const {impact,  severeImpact} = estimatedData;\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar variant=\"dense\">\n          <Tabs value={value}  className={classes.title} onChange={handleTabChange} aria-label=\"simple tabs example\">\n            <Tab label=\"Impact Cases\" {...a11yProps(0)} />\n            <Tab label=\"Severe Cases\" {...a11yProps(1)} />\n          </Tabs>\n          <IconButton aria-label=\"world\" edge=\"end\" color=\"inherit\">\n            <PublicIcon />\n          </IconButton>\n            <Typography  variant=\"h6\" noWrap >\n              {field.region}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <TabPanel value={value} index={0}>\n          <Case data={impact} />\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <Case data={severeImpact} />\n        </TabPanel>\n      </div>\n      ) \n    }\n  }\n\n  function handleChange(event:  ChangeEvent<HTMLInputElement>) {\n    setFeedback(false)\n    setEstimatedData(null)\n    setField({...field, [event.target.name]: event.target.value});\n  }\n\n  function handleSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    validateFields()\n    const data = {\n      region: {\n        name: field.region,\n        avgDailyIncomeInUSD: Number(field.avgDailyIncomeInUSD),\n        avgDailyIncomePopulation: Number(field.avgDailyIncomePopulation)\n      },\n      periodType: field.periodType,\n      timeToElapse: Number(field.timeToElapse),\n      reportedCases: Number(field.reportedCases),\n      population: Number(field.population),\n      totalHospitalBeds: Number(field.totalHospitalBeds)\n    }\n    setEstimatedData(covid19ImpactEstimator(data)) \n  }\n\n  return (\n  <div>\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\">\n        <Typography variant=\"h6\">\n        A novelty COVID-19 infections estimator\n        </Typography>\n      </Toolbar>\n    </AppBar>\n    <Container>\n      <FieldContainer \n        region={field.region}\n        avgDailyIncomeInUSD={field.avgDailyIncomeInUSD}\n        avgDailyIncomePopulation={field.avgDailyIncomePopulation}\n        timeToElapse={field.timeToElapse}\n        totalHospitalBeds={field.totalHospitalBeds}\n        population={field.population}\n        periodType={field.periodType}\n        reportedCases={field.reportedCases}\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n      />\n      {feedback ? (\n         <span>\n         <Typography variant=\"body1\">\n           Check Data Submitted\n         </Typography>\n         <Snackbar\n           open={feedback}\n           autoHideDuration={3000}\n           ContentProps={{\n             \"aria-describedby\": \"message-id\"\n           }}\n           message={<span id=\"message-id\">There is probably a missing field</span>}\n         />\n       </span>\n      ) : (showCard() ) }\n    </Container>\n  </div>\n  );\n};\n","import React from 'react';\nimport { Estimator } from './components/Estimator';\nimport \"./App.css\"\n\nexport default function App() {\n  return (\n    <Estimator />\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}